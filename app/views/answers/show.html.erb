<h1><%= link_to @answer.user.name + '\'s', @answer.user %> answers for the questionnaire taken on <%=@answer.updated_at%></h1>

<%if @user.id == 1%>
<div id="infovis" style="width: 100%; height: 600px; background-color #f00;" width="600px;" height="600px"></div>
<%end%>

<h2>Please review inferences that were generated based on your answers and mark true or false</h2>
<table>
  <tr>
    <th>Inference</th>
    <th>True?</th>
  <% option = @answer.option%>
  <% if !option.nil? %>

    <% #loop through our chain of answers to get our inferences for each quiz chain%>
    <%= form_for @answer do |f| %>
      <%= f.fields_for :confirmations do |builder| %>
        <%= render "confirmation_fields", :f => builder, :option => option %>
        <%if option 
          option = option.option%>
        <%end%>
      <%end%>
    <tr>
      <td>
      <%= f.submit "submit"%>
      </td>
    </tr>
    <%end%>
    
  <%end%>
</table>


<%if @user.id == 1%>

<script type="text/javascript">
var json;
json = {"name":"Questionnaires","id":0,"children":<%=raw @json.to_json%>};
//Create a new ST instance  
var st = new $jit.ST({  
    //id of viz container element  
    injectInto: 'infovis',  
    //set duration for the animation  
    duration: 200,  
    //set animation transition type  
    transition: $jit.Trans.Quart.easeInOut,  
    //set distance between node and its children  
    levelDistance: 50,  
    //enable panning  
    Navigation: {  
      enable:true,  
      panning:true  
    },  
    //set node and edge styles  
    //set overridable=true for styling individual  
    //nodes or edges  
    Node: {  
        height: 80,  
        width: 200,  
        type: 'rectangle',  
        color: '#aaa',  
        overridable: true  
    },  
      
    Edge: {  
        type: 'bezier',  
        overridable: true  
    },  
      
    onBeforeCompute: function(node){  
        //Log.write("loading " + node.name);  
    },  
      
    onAfterCompute: function(){  
        //Log.write("done");  
    },  
      
    //This method is called on DOM label creation.  
    //Use this method to add event handlers and styles to  
    //your node.  
    onCreateLabel: function(label, node){  
        label.id = node.id;              
        label.innerHTML = node.name;  
        label.onclick = function(){  
            st.onClick(node.id);  
        };  
        //set label styles  
        var style = label.style;  
        style.width = 200 + 'px';  
        style.height = 80 + 'px';              
        style.margin = '5px';
        style.cursor = 'pointer';  
        style.color = '#333';  
        style.fontSize = '0.8em';  
        style.textAlign= 'left';  
    },  
      
    //This method is called right before plotting  
    //a node. It's useful for changing an individual node  
    //style properties before plotting it.  
    //The data properties prefixed with a dollar  
    //sign will override the global node style properties.  
    onBeforePlotNode: function(node){  
        //add some color to the nodes in the path between the  
        //root node and the selected node.  
        if (node.selected) {  
            node.data.$color = "#ff7";  
        }  
        else {  
            delete node.data.$color;  
            //if the node belongs to the last plotted level  
            if(!node.anySubnode("exist")) {  
                //count children number  
                var count = 0;  
                node.eachSubnode(function(n) { count++; });  
                //assign a node color based on  
                //how many children it has  
                node.data.$color = ['#aaa', '#baa', '#caa', '#daa', '#eaa', '#faa'][count];                      
            }  
        }  
    },  
      
    //This method is called right before plotting  
    //an edge. It's useful for changing an individual edge  
    //style properties before plotting it.  
    //Edge data proprties prefixed with a dollar sign will  
    //override the Edge global style properties.  
    onBeforePlotLine: function(adj){  
        if (adj.nodeFrom.selected && adj.nodeTo.selected) {  
            adj.data.$color = "#fed";  
            adj.data.$lineWidth = 3;  
        }  
        else {  
            delete adj.data.$color;  
            delete adj.data.$lineWidth;  
        }  
    }  
});  
//load json data  
st.loadJSON(json);  
//compute node positions and layout  
st.compute();  
//optional: make a translation of the tree  
st.geom.translate(new $jit.Complex(-200, 0), "current");  
//emulate a click on the root node.  
//st.onClick(st.root);  
st.onClick(<%=@answer.option_id%>);  
</script>
<%end%>
